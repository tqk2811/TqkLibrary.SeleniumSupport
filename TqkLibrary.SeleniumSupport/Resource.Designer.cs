//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TqkLibrary.SeleniumSupport {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TqkLibrary.SeleniumSupport.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to chrome.runtime.onMessage.addListener(function (message, sender, callback) {
        ///	if (message &amp;&amp; message == &quot;close_tab_call&quot;) {
        ///		chrome.tabs.remove(sender.tab.id, function () {});
        ///	}
        ///});.
        /// </summary>
        internal static string Control_Ext_background {
            get {
                return ResourceManager.GetString("Control_Ext_background", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var g_acc = {
        ///	email: &quot;{email}&quot;,
        ///	pass: &quot;{pass}&quot;,
        ///	recovery: &quot;{recovery}&quot;
        ///};
        ///var step = 0;
        ///var timeout = Number(&quot;{timeout}&quot;);
        ///var intervalTime = Number(&quot;{intervalTime}&quot;);
        ///
        ///window.addEventListener(&apos;load&apos;, function () {
        ///	window.setInterval(RunLogin, intervalTime);
        ///	window.setTimeout(closeChrome, timeout);
        ///	if (window.location.href.includes(&quot;myaccount.google.com&quot;)) closeChrome();
        ///	if (!window.location.href.includes(&quot;accounts.google.com&quot;)) closeChrome();
        ///});
        ///function RunLogin() {
        ///	if (step &gt;= 2  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Control_Ext_inject {
            get {
                return ResourceManager.GetString("Control_Ext_inject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;name&quot;: &quot;Auto Login Google&quot;,
        ///  &quot;description&quot;: &quot;Auto Login Google.&quot;,
        ///  &quot;version&quot;: &quot;0.0.1&quot;,
        ///  &quot;permissions&quot;: [
        ///    &quot;&lt;all_urls&gt;&quot;,
        ///    &quot;activeTab&quot;,
        ///    &quot;tabs&quot;
        ///  ],
        ///  &quot;background&quot;: {
        ///    &quot;scripts&quot;: [
        ///      &quot;/background.js&quot;
        ///    ],
        ///    &quot;persistent&quot;: true
        ///  },
        ///  &quot;manifest_version&quot;: 2,
        ///  &quot;content_scripts&quot;: [
        ///    {
        ///      &quot;run_at&quot;: &quot;document_idle&quot;,
        ///      &quot;matches&quot;: [
        ///        &quot;https://*.google.com/*&quot;
        ///      ],
        ///      &quot;js&quot;: [
        ///        &quot;/inject.js&quot;
        ///      ]
        ///    }
        ///  ]
        ///}.
        /// </summary>
        internal static string Control_Ext_manifest {
            get {
                return ResourceManager.GetString("Control_Ext_manifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to chrome.runtime.onMessage.addListener(function (message, sender, callback) {
        ///	if (message &amp;&amp; message == &quot;close_tab_call&quot;) {
        ///		chrome.tabs.remove(sender.tab.id, function () {});
        ///	}
        ///});.
        /// </summary>
        internal static string GoogleLogin_Ext_background {
            get {
                return ResourceManager.GetString("GoogleLogin_Ext_background", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var g_acc = {
        ///	email: &quot;{email}&quot;,
        ///	pass: &quot;{pass}&quot;,
        ///	recovery: &quot;{recovery}&quot;
        ///};
        ///var step = 0;
        ///var timeout = Number(&quot;{timeout}&quot;);
        ///var intervalTime = Number(&quot;{intervalTime}&quot;);
        ///
        ///window.addEventListener(&apos;load&apos;, function () {
        ///	window.setInterval(RunLogin, intervalTime);
        ///	window.setTimeout(closeChrome, timeout);
        ///	if (window.location.href.includes(&quot;myaccount.google.com&quot;)) closeChrome();
        ///	if (!window.location.href.includes(&quot;accounts.google.com&quot;)) closeChrome();
        ///});
        ///function RunLogin() {
        ///	if (step &gt;= 2  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GoogleLogin_Ext_inject {
            get {
                return ResourceManager.GetString("GoogleLogin_Ext_inject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;name&quot;: &quot;Auto Login Google&quot;,
        ///  &quot;description&quot;: &quot;Auto Login Google.&quot;,
        ///  &quot;version&quot;: &quot;0.0.1&quot;,
        ///  &quot;permissions&quot;: [
        ///    &quot;&lt;all_urls&gt;&quot;,
        ///    &quot;activeTab&quot;,
        ///    &quot;tabs&quot;
        ///  ],
        ///  &quot;background&quot;: {
        ///    &quot;scripts&quot;: [
        ///      &quot;/background.js&quot;
        ///    ],
        ///    &quot;persistent&quot;: true
        ///  },
        ///  &quot;manifest_version&quot;: 2,
        ///  &quot;content_scripts&quot;: [
        ///    {
        ///      &quot;run_at&quot;: &quot;document_idle&quot;,
        ///      &quot;matches&quot;: [
        ///        &quot;https://*.google.com/*&quot;
        ///      ],
        ///      &quot;js&quot;: [
        ///        &quot;/inject.js&quot;
        ///      ]
        ///    }
        ///  ]
        ///}.
        /// </summary>
        internal static string GoogleLogin_Ext_manifest {
            get {
                return ResourceManager.GetString("GoogleLogin_Ext_manifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///  html2canvas 0.4.1 &lt;http://html2canvas.hertzen.com&gt;
        ///  Copyright (c) 2013 Niklas von Hertzen
        ///
        ///  Released under MIT License
        ///*/
        ///(function(t,e,n){&quot;use strict&quot;;function r(t,e,n){var r,a=t.runtimeStyle&amp;&amp;t.runtimeStyle[e],o=t.style;return!/^-?[0-9]+\.?[0-9]*(?:px)?$/i.test(n)&amp;&amp;/^-?\d/.test(n)&amp;&amp;(r=o.left,a&amp;&amp;(t.runtimeStyle.left=t.currentStyle.left),o.left=&quot;fontSize&quot;===e?&quot;1em&quot;:n||0,n=o.pixelLeft+&quot;px&quot;,o.left=r,a&amp;&amp;(t.runtimeStyle.left=a)),/^(thin|medium|thick)$/i.test(n)?n:Math.round(parseFloat(n))+&quot;px&quot;}function a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string html2canvas_min {
            get {
                return ResourceManager.GetString("html2canvas_min", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var target = arguments[0],
        ///    offsetX = arguments[1],
        ///    offsetY = arguments[2],
        ///    document = target.ownerDocument || document,
        ///    window = document.defaultView || window;
        ///
        ///var input = document.createElement(&apos;INPUT&apos;);
        ///input.type = &apos;file&apos;;
        ///input.style.display = &apos;none&apos;;
        ///input.onchange = function () {
        ///    var rect = target.getBoundingClientRect(),
        ///        x = rect.left + (offsetX || (rect.width &gt;&gt; 1)),
        ///        y = rect.top + (offsetY || (rect.height &gt;&gt; 1)),
        ///        dataTransfer = { files: thi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string JsDropFile {
            get {
                return ResourceManager.GetString("JsDropFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var config = {
        ///	mode: &quot;fixed_servers&quot;,
        ///	rules: {
        ///		singleProxy: {
        ///			scheme: &quot;http&quot;,
        ///			host: &quot;{host}&quot;,
        ///			port: {port}
        ///		},
        ///		bypassList: [&quot;localhost&quot;]
        ///	}
        ///};
        ///var authCre = {
        ///	authCredentials: {
        ///		username: &quot;{username}&quot;,
        ///		password: &quot;{password}&quot;
        ///	}
        ///};
        ///
        ///chrome.proxy.settings.set({ value: config, scope: &quot;regular&quot; }, function () { });
        ///chrome.proxy.onProxyError.addListener(function (details) {
        ///	console.log(details);
        ///});
        ///chrome.webRequest.onAuthRequired.addListener(
        ///	function callbackFn(de [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ProxyLogin_Ext_background {
            get {
                return ResourceManager.GetString("ProxyLogin_Ext_background", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;version&quot;: &quot;1.0.0&quot;,
        ///  &quot;manifest_version&quot;: 2,
        ///  &quot;name&quot;: &quot;ChromeProxy&quot;,
        ///  &quot;permissions&quot;: [
        ///    &quot;proxy&quot;,
        ///    &quot;&lt;all_urls&gt;&quot;,
        ///    &quot;webRequest&quot;,
        ///    &quot;webRequestBlocking&quot;
        ///  ],
        ///  &quot;background&quot;: {
        ///    &quot;scripts&quot;: [
        ///      &quot;background.js&quot;
        ///    ],
        ///    &quot;persistent&quot;: true
        ///  },
        ///  &quot;minimum_chrome_version&quot;: &quot;22.0.0&quot;
        ///}.
        /// </summary>
        internal static string ProxyLogin_Ext_manifest {
            get {
                return ResourceManager.GetString("ProxyLogin_Ext_manifest", resourceCulture);
            }
        }
    }
}
